For this assignment, you will write a program that can solve a maze. The maze is provided by a text file
in the following format:

20 7
0 18
xxxxxxxxxxxxxxxxxx x
x     x       xxxx x
x xxxxx  x xxx  xx x
x xxxx  xx      xx x
x x     xxx  xx xx x
x    xxxxxxx       x
xxxxxxxxxxxxxxxxxxxx

The first 2 numbers are: width-of-maze  height-of-maze
The next 2 numbers are:  row-exit       column-exit
'x' represents a wall
' ' represents a movable space

The entrance to the Maze is not specified as part of the maze text file but it will be provided by the
Creature's location.

When the maze is printed you will add:
'*' to represent part of the path to the exit
'+' to represent a visited square that is not part of the path to the exit

The following public functions need to be implemented:

// follows the format provided above printing the maze
ostream &operator<<(ostream &out, const Maze &maze);

// prints the current location of the creature, for example C(7,8)
ostream &operator<<(ostream &out, const Creature &creature);

bool Maze::IsClear(int row, int column) const;
bool Maze::IsWall(int row, int column) const;
bool Maze::IsPath(int row, int column) const;
bool Maze::IsVisited(int row, int column) const;

// mark the maze with *
void Maze::MarkAsPath(int row, int column);

// mark the maze with +
void Maze::MarkAsVisited(int row, int column);

// Maze constructor requiring a valid file name
explicit Maze::Maze(string mazeFile);

// returns a string in the form of NNEEN
// (where N means North, E means East, etc)
// that will let the creature get to the exit
// if the creature cannot get to the exit, return "X"
string Creature::Solve(Maze &maze);

// Creature constructor takes starting position
Creature(int row, int col);

Assume that the mazes will have less than 100 rows and 100 columns.
